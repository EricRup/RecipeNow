
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RecipeNow;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Youngmin
 */
public class NewUserView extends javax.swing.JFrame implements GuiHelper {

    /**
     * Creates new form LoginPage
     */
    
    private DatabaseHelper db = new DatabaseHelper();
    private boolean isAuthenticated = false;
    private String username;
    private int userid;
    private NewUserCntl newUserCntl;
    
    public NewUserView(NewUserCntl newUserCntl) {
        
        this.newUserCntl = newUserCntl;
        initComponents();  
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPage_Login = new javax.swing.JButton();
        loginPage_Exit = new javax.swing.JButton();
        loginPage_userName = new javax.swing.JTextField();
        loginPage_passWord = new javax.swing.JPasswordField();
        loginPage_registration = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");

        loginPage_Login.setText("Login");
        loginPage_Login.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginPage_LoginMouseClicked(evt);
            }
        });

        loginPage_Exit.setText("Exit");
        loginPage_Exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginPage_ExitMouseClicked(evt);
            }
        });

        loginPage_userName.setText("Enter Username");
        loginPage_userName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginPage_userNameMouseClicked(evt);
            }
        });

        loginPage_passWord.setText("                ");
        loginPage_passWord.setToolTipText("");
        loginPage_passWord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginPage_passWordMouseClicked(evt);
            }
        });

        loginPage_registration.setText("Register");
        loginPage_registration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginPage_registrationMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(loginPage_userName)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginPage_Login, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(loginPage_Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(loginPage_passWord)
                    .addComponent(loginPage_registration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addComponent(loginPage_userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginPage_passWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginPage_Login)
                    .addComponent(loginPage_Exit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginPage_registration)
                .addGap(51, 51, 51))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void loginPage_LoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginPage_LoginMouseClicked
        
        // Check if login and pw text fields are filled 
        boolean checkNull = checkNull();
        if (!checkNull) {
            String userName = loginPage_userName.getText();
            String userPw = new String(loginPage_passWord.getPassword());
            String query = ("SELECT * FROM recipe_users");
            ResultSet res = null;
            
            
            // Get data from mysql
            try {
                res = this.db.getQuerySet(query);
                // Get resultset from MySQL
            } catch (SQLException ex) {
                System.out.println("Failed to get resultset from MySQL");
            }
            
            // Run through resultset
            try {
                while(res.next()) {
                    //System.out.println("UserId: " +  res.getString("userID") + " User: " + res.getString("username") + "; Password: " + res.getString("password"));
                    if(res.getString("username").trim().equals(userName) && res.getString("password").trim().equals(userPw)) {
                        
                        // Authenticated
                        this.isAuthenticated = true;
                        this.userid = Integer.parseInt(res.getString(("userID")));
                        this.username = userName;
                        JOptionPane.showMessageDialog(rootPane, "Login Success \nUserid: " + this.userid 
                                + "\nUsername: " + this.username, "Success", HEIGHT);
                        
                        // Go to Main JFrame
                        MainMenu mainFrame = new MainMenu(userid, username);
                        mainFrame.setVisible(true);
                        super.dispose();
                        
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Login Failed", "Error", HEIGHT);
                    }
                }
            } catch (SQLException ex) {
                System.out.println("Failed to get resultset from MySQL");
            }
           
            
        }   
    }//GEN-LAST:event_loginPage_LoginMouseClicked

    private void loginPage_userNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginPage_userNameMouseClicked
        
        // Empty text field when user clicks 
        if(loginPage_userName.getText().equals("Enter Username") || loginPage_userName.getText().isEmpty()) {
            loginPage_userName.setText(""); 
        }
              
    }//GEN-LAST:event_loginPage_userNameMouseClicked

    private void loginPage_passWordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginPage_passWordMouseClicked
        
        // Empty text field when user clicks
        // System.out.println(new String(loginPage_passWord.getPassword()));
        String pW = new String(loginPage_passWord.getPassword());
        if(pW.trim().equals("") || loginPage_passWord.getPassword().toString().isEmpty()) {
            loginPage_passWord.setText("");
        }
        
    }//GEN-LAST:event_loginPage_passWordMouseClicked

    private void loginPage_ExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginPage_ExitMouseClicked
        
        System.exit(0);
        
    }//GEN-LAST:event_loginPage_ExitMouseClicked

    private void loginPage_registrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginPage_registrationMouseClicked
        
        // Check if login and pw text fields are filled 
        boolean checkNull = checkNull();
        boolean hasDuplicate;
        if(!checkNull) {
            
            // Registration code by Tim
            String username = loginPage_userName.getText();
            String password = new String(loginPage_passWord.getPassword());
            //System.out.println(password);
            //String IQuery = "INSERT INTO `recipe_users`(`username`,`password`) VALUES('" + username + "', '" + password + "')";
            //System.out.println(IQuery);//print on console
            try {
                hasDuplicate = this.db.insertIntoTable(username, password);
                if(hasDuplicate) {
                    System.out.println("Registration failed");
                    JOptionPane.showMessageDialog(rootPane, "The username is already taken or Server Connection has failed", "Error", HEIGHT);
                } else {
                    System.out.println("Registration Success " + " Username: " + username + " Password: " + password);
                    JOptionPane.showMessageDialog(rootPane, "Registration Success", "Success", HEIGHT);
                }
            } catch (SQLException ex) {
                //System.out.println("Duplicate Username exits or Connection Failed");
                
            }
            
            try {
                this.db.printTable();
            } catch (SQLException ex) {
                Logger.getLogger(NewUserView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
        
    }//GEN-LAST:event_loginPage_registrationMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton loginPage_Exit;
    private javax.swing.JButton loginPage_Login;
    private javax.swing.JPasswordField loginPage_passWord;
    private javax.swing.JButton loginPage_registration;
    private javax.swing.JTextField loginPage_userName;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean checkNull() {
        // Check if the two textfields are null or default    
        String chkUserName = "Enter Username";
        String currentUserName = loginPage_userName.getText();
        String currentPassWord = loginPage_passWord.getPassword().toString().trim();
        
        // Return false if text fiels are empty or in default state 
        return currentUserName.equals(chkUserName) || currentUserName.equals("")
                || currentPassWord.equals("");
        
    }

    @Override
    public void resetComponent() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void closeFrame() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
